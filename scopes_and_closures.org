* Scopes and Closures 
:PROPERTIES:
:header-args: :session R-session :results output value table :colnames yes
:END:

A scope is something functions or expressions are associated with that tells them what values variables refer to. A closure is a function with an associated scope. 

** Scopes and Environments 

There are two conceptual mappings going on when looking up a variable in an R expression. Since a variable is not necessarily unique, it first needs to determine which of the potential values with the same name is being referred to, and then what value that variable is pointing to.

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
x <- 1:100

f <- function(x) sqrt(sum(x))

f(x**2)
#+END_SRC

We can make this clearer by changing the names, so the variables become unique: 

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
gx <- 1:100
f <- function(px) sqrt(sum(px))
f(gx**2)
#+END_SRC

The mapping from variable names to values will be called the environment of an expression and the mapping from variable names to actual variables will be called the scope of the expression. 

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
x <- 2; y <- 2
x + y
#+END_SRC

You can also create an expression that doesn't have a scope associated to it. As long as we do not evaluate the expression, they do not even have to exist in any scope. 

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
quote(x + y)
#+END_SRC

We can use the eval function to evaluate such an expression. We need a scope to figure out which variables the variable names refer to, and an environment that tells us which values these variables are pointing to. 

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
eval(x + y)
#+END_SRC

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
eval(quote(x + y))
#+END_SRC

In the first example, eval used the global scope. In the second, the quoted expression is put in a scope (the global scope). To see the difference, we need to provide eval with an environment in which to evaluate the expression. 

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
env <- new.env()
env$x <- 4

# or we could do this 
env <- list2env(list(x = 4))
#+END_SRC

If we evaluate the unquoted expression in this environment, we get the same result as before. 

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
eval(x + y, env)
#+END_SRC

If we use a quoted expression, env overrides the scope we are using 

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
eval(quote(x + y), env)
#+END_SRC

eval figures out that x is in our specified scope, and then looks up the unknown in the global environment. 

** Environment Chains, Scope, and Function Calls 

Whenever you evaluate an expression, there is an associated chain of environments. The scope of the variables in the expression, which variables the actual variable names refer to, depends on where in the chain the variables can be found. 

The rules for how variables are mapped to values are always the same. It involves a search in the chain of environments that are active at the time the expression is evaluated. The only difficulty is knowing which environments are in the chain at any given time. 


** Scopes, Lazy Evaluation, and Default Parameters 

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
f <- function(x, y = 2 * x) x + y

f(x = 2) # 6

f(x = 2, y = 2 * x) # 10
#+END_SRC

** Nested Functions and Scopes 

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
f <- function(x) {
    g <- function(y) x + y
    g(x)
}

f(2)
#+END_SRC

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
f <- function(x) {
    (g <- function(y) x + y) 
}

h <- f(2)
h(2)
#+END_SRC

The rule for finding the variable's values, based on the environment where functions are defined, is called lexical scoping. 

If the mapping from variables to values depended on where a function was called rather than where it was defined, something called dynamic scope, you couldn't do this. 

** Closures 

Functions that remember the environment of another function invocation are called closures. The term derives from enclosing scope and refers to the property of remembering the enclosing environment where they were created. 

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
make_adder <- function(x) {
    (add_y <- function(y) x + y)
}

add1 <- make_adder(1)
add2 <- make_adder(2)

add1(3)
#+END_SRC

The usefulness of closures is in combination with higher order functions. Higher order functions are functions that either take other functions as arguments, or return functions. 


** Reaching Outside Your Innermost Scope 

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
make_counter <- function() {
    x <- 0
    count <- function() {
        (x <<- x + 1) 
    }
}

counter <- make_counter()

counter()
#+END_SRC

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
depth_first_numbers <- function(tree) {
    table <- c()
    counter <- make_counter()

    traverse_tree <- function(node) {
        if (is.null(node$left) && is.null(node$right)) {
            dfn <- counter()
            node$range <- c(dfn, dfn)
            table[node$name] <<- dfn
            node
        } else {
            left <- traverse_tree(node$left)
            right <- traverse_tree(node$right)
            new_node <- make_node(node$name, left, right)
            new_node$range <- c(left$range[1],
                                right$range[2])
            new_node
        }
    }

    new_tree <- traverse_tree(tree)
    list(tree = new_tree,
         table = table)
}

result <- depth_first_numbers(tree)
print_tree(result$tree)
#+END_SRC

** Lexical Scope and Dynamic Scope 

R also supports dynamic scope. 

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
x <- 2; y <- 2
eval(quote(x + y))
#+END_SRC

Consider this example, where we remove the global variables for x and y and call eval inside a function that had them as local variables:

#+BEGIN_SRC R :post round-tbl[:colnames yes](*this*)
rm(x); rm(y)

f <- function() {
    x <- 2; y <- 2
    eval(quote(x + y))
}

f()
#+END_SRC

The eval function is not defined insdie the f function, so it shouldn't know about these parameters. It manages to get them anyway, because R also supports dynamic scope. This is where we find variables based on which functions are on the call stack, not which functions are lexically enclosing the place where we define them. 

The eval function manages to get the calling scope instead of the enclosing scope using the function parent.frame to get the environment of the functions on the call stack. 
